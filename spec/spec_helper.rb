# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
require 'factory_girl_rails'
require 'support/request_helpers'
require 'webmock/rspec'
WebMock.disable_net_connect!(allow_localhost: true)
WebMock.disable_net_connect!(allow: ["127.0.0.1"])

RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # Use factory_girl methods without a class.
  config.include FactoryGirl::Syntax::Methods

  #define json method, so we dont need to add json = JSON.parse(response.body) in every file
  config.include Requests::JsonHelpers, type: :controller
end

def set_json_format
  @request.env["HTTP_ACCEPT"] = 'application/json'
end

def api_login_as user
  @request.env["HTTP_AUTHORIZATION"] = "Token token=\"#{user.api_key}\""
end

def stub_request_url url, request_body, method, response_body, add_headers = true
  stub_req = stub_request(method, url)
  headers = {'Accept'=>'*/*', 'User-Agent'=>'Ruby'}
  headers = {} unless add_headers

  stub_req = stub_req.with(headers: headers)
  stub_req = stub_req.with(body: request_body) if request_body

  stub_req = stub_req.to_return(status: 200, body: response_body, headers: {})
end
